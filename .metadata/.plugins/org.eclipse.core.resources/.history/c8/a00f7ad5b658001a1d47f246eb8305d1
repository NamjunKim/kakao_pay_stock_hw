package com.kakao.hw.service;

import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.kakao.hw.dto.BranchAccountInfo;
import com.kakao.hw.dto.BusinessHistoryDTO;

@Service
public class TransactionServiceImpl implements TransactionService{

	//branchInfo.csv
	//관리점코드	관리점명
	
	//accountInfo.csv
	//계좌번호	계좌명	관리점코드
	
	//transactionHistory.csv
	//거래일자	계좌번호	거래번호	금액	수수료	취소여부

	// TO DO classpath 로 바뀌야함
	// /Users/namjunkim/Documents/workplace/kakak-hw/data
	final static String classPath = "/Users/namjunkim/Documents/workplace/kakak-hw/data"; 
	
	@Autowired
	private ReadCSVService readCSVService;
	
	private List<BusinessHistoryDTO> mappingToDtoTransactionHistory() {
		
		List<BusinessHistoryDTO> businessHistoryDTOList = Lists.newArrayList();
		
		List<List<String>> transactionHistoryList = 
				readCSVService.readCSVFileFromLocal(classPath + "/transactionHistory.csv", 1);
		
		for(List<String> transactionHistory : transactionHistoryList) {
			BusinessHistoryDTO businessHistoryDTO = new BusinessHistoryDTO();
			businessHistoryDTO.setTransactionDay(transactionHistory.get(0));
			businessHistoryDTO.setAcctNo(transactionHistory.get(1));
			businessHistoryDTO.setTransactionNo(Long.valueOf(transactionHistory.get(2)));
			businessHistoryDTO.setAmount(Long.valueOf(transactionHistory.get(3)));
			businessHistoryDTO.setFee(Long.valueOf(transactionHistory.get(4)));
			businessHistoryDTO.setCancellation(transactionHistory.get(5));

			businessHistoryDTOList.add(businessHistoryDTO);
		}
		
		return businessHistoryDTOList;
	}
	
	private List<BranchAccountInfo> mappingToDtoBrachAccountInfo() {
		
		List<BranchAccountInfo> branchAccountInfoListResult = Lists.newArrayList();
		
		List<List<String>> branchAccountInfoLists = 
				readCSVService.readCSVFileFromLocal(classPath + "/accountInfo.csv", 1);
		
		for(List<String> branchAccountInfoList : branchAccountInfoLists) {
			BranchAccountInfo branchAccountInfo = new BranchAccountInfo();
			branchAccountInfo.setAcctNo(branchAccountInfoList.get(0));
			branchAccountInfo.setAcctName(branchAccountInfoList.get(1));
			branchAccountInfo.setBrCode(branchAccountInfoList.get(2));

			branchAccountInfoListResult.add(branchAccountInfo);
		}
		
		return branchAccountInfoListResult;
	}
	
	private BusinessHistoryDTO mappingBranchAccountInfoListIntoBusinessHistoryDTO(
			List<BranchAccountInfo> branchAccountInfoList, BusinessHistoryDTO businessHistoryDTO) {
		
		for(BranchAccountInfo branchAccountInfo : branchAccountInfoList) {
			if(branchAccountInfo.getAcctNo().equals(businessHistoryDTO.getAcctNo())
				|| branchAccountInfo.getAcctName().equals(businessHistoryDTO.getAcctName())
			) {
				businessHistoryDTO.setAcctName(branchAccountInfo.getAcctName());
				businessHistoryDTO.setAcctNo(branchAccountInfo.getAcctNo());
			}
		}
		
		return businessHistoryDTO;
	}

	private Map<String /*year*/, List<BusinessHistoryDTO>> divideBusinessHistoryDTOListByYear (List<BusinessHistoryDTO> businessHistoryDTOList) {
		
		Map<String /*year*/, List<BusinessHistoryDTO>> businessHistoryMapByYear = Maps.newHashMap();
		
		String prefixYear = "";
		for(BusinessHistoryDTO businessHistoryDTO : businessHistoryDTOList) {
			prefixYear = businessHistoryDTO.getTransactionDay().substring(0, 4);
			if(businessHistoryMapByYear.get(prefixYear) == null) {
				List<BusinessHistoryDTO> newYearBusinessHistoryDTOList = Lists.newArrayList();
				newYearBusinessHistoryDTOList.add(businessHistoryDTO);
				businessHistoryMapByYear.put(prefixYear, newYearBusinessHistoryDTOList);
			} else {
				businessHistoryMapByYear.get(prefixYear).add(businessHistoryDTO);
			}
		}
		
		return businessHistoryMapByYear;
	}
	
	public Map<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> 
			divideBusinessHistoryByYearMapListByCustomer (Map<String /*year*/, List<BusinessHistoryDTO>> businessHistoryByYearMap) {

		Map<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> customerSumByYearMap = Maps.newHashMap();
		
		
		for(Map.Entry<String /*year*/, List<BusinessHistoryDTO>> businessHistoryByYear : businessHistoryByYearMap.entrySet()) {
			Map<String/*customer*/, Long /*sumOfAmount*/> customerSumMap = Maps.newHashMap();
//			customerSumByYearMap.put(businessHistoryByYear.getKey(), null);
			
			for(BusinessHistoryDTO businessHistoryDTO : businessHistoryByYear.getValue()) {
				Long sumOfAmount = customerSumMap.get(businessHistoryDTO.getAcctName());
				if(sumOfAmount == null) { sumOfAmount = 0L; }
				if(businessHistoryDTO.getCancellation().equals("N")) {
					customerSumMap.put(businessHistoryDTO.getAcctName(), sumOfAmount + businessHistoryDTO.getAmount() - businessHistoryDTO.getFee());
				}
			}
			customerSumByYearMap.put(businessHistoryByYear.getKey(), customerSumMap);
		}
		
		return customerSumByYearMap;
	}
	
	public Map<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> 
		divideBusinessHistoryByYearMapListByCustomer1 (Map<String /*year*/, List<BusinessHistoryDTO>> businessHistoryByYearMap) {

			Map<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> customerSumByYearMap = Maps.newHashMap();

			for(Map.Entry<String /*year*/, List<BusinessHistoryDTO>> businessHistoryByYear : businessHistoryByYearMap.entrySet()) {
				Map<String/*customer*/, Long /*sumOfAmount*/> customerSumMap = Maps.newHashMap();
	
				for(BusinessHistoryDTO businessHistoryDTO : businessHistoryByYear.getValue()) {
					Long sumOfAmount = customerSumMap.get(businessHistoryDTO.getAcctName());
					if(sumOfAmount == null) { sumOfAmount = 0L; }
					if(businessHistoryDTO.getCancellation().equals("N")) {
						customerSumMap.put(businessHistoryDTO.getAcctName(), sumOfAmount + businessHistoryDTO.getAmount() - businessHistoryDTO.getFee());
					}
				}
				customerSumByYearMap.put(businessHistoryByYear.getKey(), customerSumMap);
			}

			return customerSumByYearMap;
	}
	
	// #1
	@Override
	public Map<String /*year*/, BusinessHistoryDTO> getCustomerHighSumAmountByYear () {
		List<BranchAccountInfo> branchAccountInfoList = mappingToDtoBrachAccountInfo();
		List<BusinessHistoryDTO> businessHistoryDTOs = mappingToDtoTransactionHistory();
		List<BusinessHistoryDTO> businessHistoryDTOList = Lists.newArrayList();
		for(BusinessHistoryDTO businessHistoryDTO : businessHistoryDTOs) {
			businessHistoryDTOList.add(mappingBranchAccountInfoListIntoBusinessHistoryDTO(branchAccountInfoList, businessHistoryDTO));
		}
		
		// byYear
		Map<String /*year*/, List<BusinessHistoryDTO>> businessHistoryByYearMap = divideBusinessHistoryDTOListByYear(businessHistoryDTOList);
		Map<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> resultByCustomer = 
				divideBusinessHistoryByYearMapListByCustomer(businessHistoryByYearMap);
		
		Map<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> resultDesc = Maps.newHashMap();
		
		for(Map.Entry<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> entry : resultByCustomer.entrySet()) {
			List<Map.Entry<String/*customer*/, Long /*sumOfAmount*/>> mapList = new LinkedList<>(entry.getValue().entrySet());
	        Collections.sort(mapList, new Comparator<Map.Entry<String, Long>>() {
	            @Override
	            public int compare(Map.Entry<String, Long> o1, Map.Entry<String, Long> o2) {
	            	Long comparision = (o1.getValue() - o2.getValue()) * -1;
	                return (int) (comparision == 0 ? o1.getKey().compareTo(o2.getKey()) : comparision);
	            }
	        });
	        
	        Map<String/*customer*/, Long /*sumOfAmount*/> sortedMap = new LinkedHashMap<>(); 
	        for(Iterator<Map.Entry<String, Long>> iterator = mapList.iterator(); iterator.hasNext();){
	            Map.Entry<String, Long> sortedEntry = iterator.next();
	            sortedMap.put(sortedEntry.getKey(), sortedEntry.getValue());
	        }
	        
	        resultDesc.put(entry.getKey(), sortedMap);
		}
	    
		Map<String /*year*/, BusinessHistoryDTO> finalResult = Maps.newHashMap();
		
		for(Map.Entry<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> entry : resultDesc.entrySet()) {
			for(Map.Entry<String/*customer*/, Long /*sumOfAmount*/> entryCustomer : entry.getValue().entrySet()) {
				if(finalResult.get(entry.getKey()) == null) {
					BusinessHistoryDTO businessHistoryDTO = new BusinessHistoryDTO();
					businessHistoryDTO.setAcctName(entryCustomer.getKey());
					businessHistoryDTO.setAmount(entryCustomer.getValue());
					mappingBranchAccountInfoListIntoBusinessHistoryDTO(branchAccountInfoList, businessHistoryDTO);
					finalResult.put(entry.getKey(), businessHistoryDTO);
				}
			}
		}
		
		return finalResult;
	}
	
	// #2
	public Map<String /*year*/, BusinessHistoryDTO> getNonTransationCustomerByYear () {
		List<BranchAccountInfo> branchAccountInfoList = mappingToDtoBrachAccountInfo();
		List<BusinessHistoryDTO> businessHistoryDTOs = mappingToDtoTransactionHistory();
		List<BusinessHistoryDTO> businessHistoryDTOList = Lists.newArrayList();
		for(BusinessHistoryDTO businessHistoryDTO : businessHistoryDTOs) {
			businessHistoryDTOList.add(mappingBranchAccountInfoListIntoBusinessHistoryDTO(branchAccountInfoList, businessHistoryDTO));
		}
		
		// byYear
		Map<String /*year*/, List<BusinessHistoryDTO>> businessHistoryByYearMap = divideBusinessHistoryDTOListByYear(businessHistoryDTOList);
		Map<String /*year*/, BusinessHistoryDTO> finalResulst = Maps.newHashMap();
		
		for(Map.Entry<String /*year*/, List<BusinessHistoryDTO>> businessHistoryByYear : businessHistoryByYearMap.entrySet()) {
//			if(businessHistoryByYear.getValue().stream().noneMatch(businessHistory -> businessHistory.getCancellation().equals("N"))) {
//				finalResulst.put(businessHistoryByYear.getKey(), businessHistory);
//			}
			for(BusinessHistoryDTO businessHistoryDTO : businessHistoryByYear.getValue()) {
				if(businessHistoryDTO.getCancellation().equals("Y")) {
					finalResulst.put(businessHistoryByYear.getKey(), businessHistoryDTO);
				} else {
					finalResulst.remove(businessHistoryByYear.getKey());
				}
			}
		}
		
		return null;
	}
}
