package com.kakao.hw.service;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.kakao.hw.dto.AmountSumByBranch;
import com.kakao.hw.dto.BranchAccountInfo;
import com.kakao.hw.dto.BranchInfoDTO;
import com.kakao.hw.dto.BusinessHistoryDTO;
import com.kakao.hw.dto.NoneTransctionCustomerDTO;

@RunWith(MockitoJUnitRunner.Silent.class)
public class TransactionServiceTest {

	@InjectMocks
	private TransactionServiceImpl transactionService;

	@Mock
	private ReadCSVServiceImpl readCSVService;
	
	final static String classPath = "/Users/namjunkim/Documents/workplace/kakak-hw/data"; 
	

	@Before
	public void setup() {

	}

//	@Test
//	public void getCustomerHighSumAmountByYearTEST() throws Exception {
//		List<List<String>> transactionHistoryList = Lists.newArrayList();
//		List<Map.Entry<String/*customer*/, Long /*sumOfAmount*/>> mapList = new LinkedList<>();
////		List<String> testList = Lists.newArrayList();
////		testList.add("111111");
////		testList.add("에이스");
////		testList.add("A");
////		
////		transactionHistoryList.add(testList);
//		
//		when(readCSVService.readCSVFileFromLocal("path", 1)).thenReturn(transactionHistoryList);
//		when(Collections.sort( mapList)).thenReturn(new LinkedList<>());
//		transactionService.getCustomerHighSumAmountByYear();
////		assertEquals(Long.valueOf(test).longValue(), 1L);
//		
//	}
//	
//	private void dddd() {
//        Collections.sort(mapList, new Comparator<Map.Entry<String, Long>>() {
//            @Override
//            public int compare(Map.Entry<String, Long> o1, Map.Entry<String, Long> o2) {
//            	Long comparision = (o1.getValue() - o2.getValue()) * -1;
//                return (int) (comparision == 0 ? o1.getKey().compareTo(o2.getKey()) : comparision);
//            }
//        });
//        
//	}
	@Test
	public void getNonTransationCustomerByYearTEST() {
		List<List<String>> transactionHistoryList = Lists.newArrayList();
		when(readCSVService.readCSVFileFromLocal("path", 1)).thenReturn(transactionHistoryList);
		
		List<NoneTransctionCustomerDTO> noneTransctionCustomerDTOList = transactionService.getNonTransationCustomerByYear();
		noneTransctionCustomerDTOList.get(0).getAcctNo();
	}
	
	@Test
	public void getSumAmountByBrNameTEST() {
		List<List<String>> transactionHistoryList = Lists.newArrayList();
		List<String> transactionHistory = Lists.newArrayList();
		transactionHistory.add("11111119");
		transactionHistory.add("주디");
		transactionHistory.add("D");
		when(readCSVService.readCSVFileFromLocal("path", 1)).thenReturn(transactionHistoryList);
		List<BusinessHistoryDTO> a = transactionService.mappingToDtoTransactionHistory();
		AmountSumByBranch amountSumByBranch = transactionService.getSumAmountByBrName("잠실점");
		assertEquals("잠실점", amountSumByBranch.getBrName());
	}
	
	//
	
	@Test
	public void mappingToDtoTransactionHistoryTest() {
		List<List<String>> transactionHistoryList = Lists.newArrayList();
		List<String> transactionHistory = Lists.newArrayList();
		transactionHistory.add("20180102");
		transactionHistory.add("11111111");
		transactionHistory.add("1");
		transactionHistory.add("1000000");
		transactionHistory.add("0");
		transactionHistory.add("N");
		transactionHistoryList.add(transactionHistory);
		when(readCSVService.readCSVFileFromLocal(classPath + "/transactionHistory.csv", 1)).thenReturn(transactionHistoryList);
		List<BusinessHistoryDTO> result = transactionService.mappingToDtoTransactionHistory();
		
		assertEquals("20180102", result.get(0).getTransactionDay());
		assertEquals("11111111", result.get(0).getAcctNo());
		assertEquals(Long.valueOf("1"), result.get(0).getTransactionNo());
		assertEquals(Long.valueOf("1000000"), result.get(0).getAmount());
		assertEquals(Long.valueOf("0"), result.get(0).getFee());
		assertEquals("N", result.get(0).getCancellation());
	}
	
	@Test
	public void mappingToDtoBrachAccountInfoTest() {
		List<List<String>> transactionHistoryList = Lists.newArrayList();
		List<String> transactionHistory = Lists.newArrayList();
		transactionHistory.add("11111119");
		transactionHistory.add("주디");
		transactionHistory.add("D");
		transactionHistoryList.add(transactionHistory);
		when(readCSVService.readCSVFileFromLocal(classPath + "/accountInfo.csv", 1)).thenReturn(transactionHistoryList);
		List<BranchAccountInfo> result = transactionService.mappingToDtoBrachAccountInfo();
		
		assertEquals("11111119", result.get(0).getAcctNo());
		assertEquals("주디", result.get(0).getAcctName());
		assertEquals("D", result.get(0).getBrCode());
	}
	
	@Test
	public void mappingToDtoBranchInfoDTOTest() {
		List<List<String>> transactionHistoryList = Lists.newArrayList();
		List<String> transactionHistory = Lists.newArrayList();
		transactionHistory.add("D");
		transactionHistory.add("잠실점");
		transactionHistoryList.add(transactionHistory);
		when(readCSVService.readCSVFileFromLocal(classPath + "/branchInfo.csv", 1)).thenReturn(transactionHistoryList);
		List<BranchInfoDTO> result = transactionService.mappingToDtoBranchInfoDTO();
		
		assertEquals("D", result.get(0).getBrCode());
		assertEquals("잠실점", result.get(0).getBrName());
	}
	
	@Test
	public void mappingBranchAccountInfoListIntoBusinessHistoryDTOTest() {
		BusinessHistoryDTO businessHistoryDTO = new BusinessHistoryDTO();
		businessHistoryDTO.setTransactionDay("20180102");
		businessHistoryDTO.setAcctNo("11111111");
		businessHistoryDTO.setTransactionNo(1L);
		businessHistoryDTO.setAmount(1000000L);
		businessHistoryDTO.setFee(0L);
		businessHistoryDTO.setCancellation("N");
		
		List<BranchAccountInfo> branchAccountInfoList = Lists.newArrayList();
		BranchAccountInfo branchAccountInfo = new BranchAccountInfo();
		branchAccountInfo.setAcctNo("11111111");
		branchAccountInfo.setAcctName("제이");
		branchAccountInfo.setBrCode("A");
		branchAccountInfoList.add(branchAccountInfo);
		
		BusinessHistoryDTO result = 
				transactionService.mappingBranchAccountInfoListIntoBusinessHistoryDTO(branchAccountInfoList, businessHistoryDTO);

		assertEquals("11111111", result.getAcctNo());
		assertEquals("A", result.getBrCode());
		assertEquals("제이", result.getAcctName());
	}

	@Test
	public void mappingBranchInfoDTOListIntoBusinessHistoryDTOTest() {
		BusinessHistoryDTO businessHistoryDTO = new BusinessHistoryDTO();
		businessHistoryDTO.setTransactionDay("20180102");
		businessHistoryDTO.setAcctNo("11111111");
		businessHistoryDTO.setTransactionNo(1L);
		businessHistoryDTO.setAmount(1000000L);
		businessHistoryDTO.setFee(0L);
		businessHistoryDTO.setCancellation("N");
		businessHistoryDTO.setBrCode("A");
		
		List<BranchInfoDTO> branchInfoDTOList = Lists.newArrayList();
		BranchInfoDTO branchInfoDTO = new BranchInfoDTO();
		branchInfoDTO.setBrCode("A");
		branchInfoDTO.setBrName("판교점");
		branchInfoDTOList.add(branchInfoDTO);
		
		BusinessHistoryDTO result = 
				transactionService.mappingBranchInfoDTOListIntoBusinessHistoryDTO(branchInfoDTOList, businessHistoryDTO);
		
		assertEquals("판교점", result.getBrName());
		
	}
	
	@Test
	public void divideBusinessHistoryDTOListByYearTEST() {
		List<BusinessHistoryDTO> businessHistoryDTOList = Lists.newArrayList();
		BusinessHistoryDTO businessHistoryDTO = new BusinessHistoryDTO();
		businessHistoryDTO.setTransactionDay("20180102");
		businessHistoryDTO.setAcctNo("11111111");
		businessHistoryDTO.setTransactionNo(1L);
		businessHistoryDTO.setAmount(1000000L);
		businessHistoryDTO.setFee(0L);
		businessHistoryDTO.setCancellation("N");
		businessHistoryDTO.setBrCode("A");
		
		Map<String /*year*/, List<BusinessHistoryDTO>> result =
				transactionService.divideBusinessHistoryDTOListByYear(businessHistoryDTOList);
		
		for(Map.Entry<String /*year*/, List<BusinessHistoryDTO>> entry : result.entrySet()) {
			assertEquals("2018", entry.getKey());
			assertEquals("11111111", entry.getValue().get(0).getAcctNo());
		}

	}
	
	@Test
	public void divideBusinessHistoryByYearMapListByCustomerTEST() {
		
		Map<String /*year*/, List<BusinessHistoryDTO>> businessHistoryDTOByYear = Maps.newHashMap();
		
		List<BusinessHistoryDTO> businessHistoryDTOList = Lists.newArrayList();
		BusinessHistoryDTO businessHistoryDTO = new BusinessHistoryDTO();
		businessHistoryDTO.setTransactionDay("20180102");
		businessHistoryDTO.setAcctNo("11111111");
		businessHistoryDTO.setTransactionNo(1L);
		businessHistoryDTO.setAmount(1000000L);
		businessHistoryDTO.setFee(0L);
		businessHistoryDTO.setCancellation("N");
		businessHistoryDTO.setBrCode("A");
		businessHistoryDTO.setAcctName("제이");
		
		BusinessHistoryDTO businessHistoryDTO2 = new BusinessHistoryDTO();
		businessHistoryDTO2.setTransactionDay("20180102");
		businessHistoryDTO2.setAcctNo("11111111");
		businessHistoryDTO2.setTransactionNo(1L);
		businessHistoryDTO2.setAmount(2000000L);
		businessHistoryDTO2.setFee(1000L);
		businessHistoryDTO2.setCancellation("N");
		businessHistoryDTO2.setBrCode("A");
		businessHistoryDTO2.setAcctName("제이");
		
		businessHistoryDTOList.add(businessHistoryDTO);
		businessHistoryDTOList.add(businessHistoryDTO2);
		
		businessHistoryDTOByYear.put("2018", businessHistoryDTOList);
		
		Map<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> result = 
				transactionService.divideBusinessHistoryByYearMapListByCustomer(businessHistoryDTOByYear);
		
		for(Map.Entry<String /*year*/, Map<String/*customer*/, Long /*sumOfAmount*/>> entry : result.entrySet()) {
			assertEquals("2018", entry.getKey());
			for(Map.Entry<String/*customer*/, Long /*sumOfAmount*/> entry2 : entry.getValue().entrySet()) {
				assertEquals("11111111", entry2.getKey());
				assertEquals(Long.valueOf("2999000L"), entry2.getValue());
			}
		}
	}
}
